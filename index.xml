<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jw910731's Blog</title><link>https://blog.jw910731.wtf/</link><description>Recent content on jw910731's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>jw910731© {year}</copyright><lastBuildDate>Wed, 23 Sep 2020 20:58:19 +0800</lastBuildDate><atom:link href="https://blog.jw910731.wtf/index.xml" rel="self" type="application/rss+xml"/><item><title>毒L紀 程設一[2] 建構工具</title><link>https://blog.jw910731.wtf/blog/comp-prog-i-2/</link><pubDate>Wed, 23 Sep 2020 20:58:19 +0800</pubDate><guid>https://blog.jw910731.wtf/blog/comp-prog-i-2/</guid><description>Make Intro Make指令會在執行時的word dir底下尋找Makefile這個檔案， 依照裡面的指示編譯你的程式，所以正確編寫Makefile就變成了建立建構系統時的一件重要的事情。
一個最簡單的Makefile大概如下
.PHONY: gcc -o main main.c 但我個人覺得之後檔案變多，還想加各種編譯參數加入後會變得很難調教，在下面給個我個人覺得很棒的Makefile範例。
安利時間 make是Linux系統上常見的建構工具，有著強大的功能。這邊展示我個人調教的Makefile
CC=gcc CFLAGS=-Wall -Wextra -O2 -std=c11 P=main OBJECTS=main.o $(P): $(OBJECTS) clean: rm $(OBJECTS) $(P) 其中要記得把OBJECTS變數設成自己原始檔(source)的名稱(請將副檔名改成.o)，若有多個檔案請以空格隔開，這樣在make執行時就會一併幫你組建好了。CFLAGS可以自己調成自己喜歡的編譯器參數，不管是享受-O3毒瘤的超爽加速還是想請編譯器別噴那麼多Warning都可以。
這個Makefile很短，且有很高的適應性，在期中期末即使遇到雞掰的要求也能優雅的組建。其中的編譯指令已經以make系統的預設建構指令隱含在裡面了，LDFLAG也因不需要link其他的Library而省略了。
詳細的Makefile設定方法可以看〈21世紀的C語言〉這本書，上面的Makefile也是在閱讀此書後寫的，書中講述了很多現代C語言在實戰中可以運用的技巧與如何優雅使用C語言，強烈推薦未來想繼續使用C語言的人入手！
讚曰 文元讚曰，感謝C語言讓我們不用寫組合語言，在此分享Apollo-11登月導航的原始碼，以組合語言寫成。因為有C語言的誕生，我們才能免於如同登月時的電腦工程師一般受到組合語言的摧殘。</description></item><item><title>2020/09/18 師大碼賽客 模擬賽心得</title><link>https://blog.jw910731.wtf/blog/competetive-prog-2020-09-18/</link><pubDate>Fri, 18 Sep 2020 23:59:33 +0800</pubDate><guid>https://blog.jw910731.wtf/blog/competetive-prog-2020-09-18/</guid><description>題目 Origin Title A UVA 10530 Guessing Game B UVA 12428 Enemy at the Gates C UVALive 6693 Flow Game D UVALive 6692 Lucky Number E UVA 1589 Xiangqi F UVALive 7003 A Balance Game on Trees G UVA 11419 SAM I AM H UVA 11324 The Largest Clique I UVA 11825 Hackers&amp;rsquo; Crackdown J UVA 10462 Is There A Second Way Left?</description></item><item><title>毒L紀 程設一[1] Hello World與如何編譯</title><link>https://blog.jw910731.wtf/blog/comp-prog-i-1/</link><pubDate>Fri, 18 Sep 2020 15:39:55 +0800</pubDate><guid>https://blog.jw910731.wtf/blog/comp-prog-i-1/</guid><description>Programming 上課範例程式 #include &amp;lt;stdio.h&amp;gt; int main(){ printf(&amp;quot;Hello World!\n&amp;quot;); return 0; } main是C語言定義的Entry Point，程式執行後會呼叫main。
printf是格式化輸出的函數，型別為int printf ( const char * format, ... )，也就是說輸入一個「格式化字串」(型別為內容為常數的字元陣列(也是指標))，以及多個格式化字串所需的參數，輸出格式化字串格式化後的結果到標準輸出流。格式化字串的格式以連結為例！
return 0;事實上是main函數回傳給系統的Exit Code，可以代表程式結束的狀況是正常還是異常，以Linux而言0是正常退出。
毒瘤程式 #include &amp;lt;unistd.h&amp;gt; int main(){ char s[]=&amp;quot;Hello World!\n&amp;quot;; write(STDOUT_FILENO, s, sizeof(s)); return 0; } 不要問，裸的輸出Fixed Length Byte到stdout的人是瘋子。
編譯與執行 安利個編譯參數，如下：
gcc -O2 -std=c11 -Wall -Wextra -o &amp;lt;輸出檔案&amp;gt; &amp;lt;原始碼&amp;gt; 解釋個參數
-O2 幫你優化程式，讓你奇怪的錯誤更容易被發現 -std=c11 告訴編譯器你要寫的程式要用C11的標準來編譯 -Wall -Wextra 叫編譯器多檢查些，但這樣就會出現程式可以編譯，卻會出現警告訊息的狀況，多出來的警告訊息就斟酌參考吧！ 請記得把&amp;lt;原始碼&amp;gt;替換成自己source file的名稱，&amp;lt;輸出檔案&amp;gt;換成你想要編譯完的程式想要的名字</description></item><item><title>毒L紀 程設一[0] 垃圾話與傳教</title><link>https://blog.jw910731.wtf/blog/comp-prog-i-0/</link><pubDate>Wed, 16 Sep 2020 22:55:30 +0800</pubDate><guid>https://blog.jw910731.wtf/blog/comp-prog-i-0/</guid><description>垃圾話 毒L紀 = 毒瘤+Linux紀 意指我以毒瘤的稱號讚嘆這個老師足夠狂，敢搬這麼毒瘤的東西出來給大家吸 總之這個系列不定期推出 會放點你可能必須知道的東西，也會放些不建議你抄也不太健康的東西 如何判斷不太健康，就是你感覺看不懂，貼進Google也查不太到正常的解釋，就是不健康 總之什麼都有什麼都不奇怪
設置Linux環境 Virtual Machine 你的選擇有
大陸正版的VMware 免費難用的Virtual box 自由選擇 如何安裝請相信Google小姐的力量 WSL 2 真的很香，究竟更新到2版後有什麼差請見官方比較表 但總之建議不要用WSL 1惹L紀森77，而且那很毒瘤。 安裝教學可以Google也可以看微軟把拔ㄞㄉ教學 總之這傢伙可以給你一個Linux的Command Prompt(命令列)，而且你不需要手動分配固定大小的記憶體給他，他會自己想辦法，網路也互通，檔案可以從/mnt底下看到你的C槽D槽，但不太建議你把平常Linux的檔案放在Windows的檔案目錄下，不然存取檔案的效能可能會GG
設置編寫環境 原生/虛擬機環境 強推Sublime Text 3給你舒服編譯環境 即使是Mac的使用者也可以一起來喔 這裡送上推薦必備的Plugin
Chineese Localization SublimeLinter SublimeLinter-gcc 其中SublimeLinter-gcc在安裝時會提供預設的設定檔，可以跟著附贈的教學操作，使用預設設定檔，就可以有即時的語法檢查了 目前一鍵舒服編譯的工具目前只支援C++，就不放上來了，等我慢慢更新吧QwQ WSL 2 可以使用Visual Studio Code(不是Visual Studio ! ! )的Remote - WSL來在WSL內的環境開發 有興趣的人可以研究看看，我沒在用這個寫C
Migrate from C++ 總之如果你之前寫了C++，有些習慣語法需要改一下
#include &amp;lt;cxxx&amp;gt; -&amp;gt; #include &amp;lt;xxx.h&amp;gt; 如題，你以前#include &amp;lt;cstdio&amp;gt;現在要#include &amp;lt;stdio.h&amp;gt;
輸入輸出字串啥的 請愛用scanf取代cin，用printf取代cout。 string沒得用了去用char組成的陣列，算陣列長度請用strlen，然後要記得這個函數的時間複雜度有點糟請不要反覆呼叫！ 然後不管是IO還是C String(指由char組成的陣列)都比C++難用不少，就多多體諒這個老傢伙拉&amp;rsquo;_&amp;gt;&amp;rsquo;</description></item><item><title>Hime輸入法導致特定程式無法開啟</title><link>https://blog.jw910731.wtf/blog/hime-cause-gtk-crash/</link><pubDate>Fri, 11 Sep 2020 00:13:47 +0800</pubDate><guid>https://blog.jw910731.wtf/blog/hime-cause-gtk-crash/</guid><description>Info Linux env Linux Mint 20.04 + Linux Kernel 5.4.0-47-generic Cinnamon Desktop Environment Hime IME (ver. 0.9.10) Sublime Text 3 (Build 3211) 事件 某天我想寫程式的時候發現打不開Sublime Text 3了，但從command line打開卻沒跑出任何錯誤訊息。經過一波爬文後找到要用--debug來拿到錯誤訊息，接著就拿到
GLib-GObject-WARNING **: 19:44:00.522: cannot register existing type 'GtkIMContext' GLib-CRITICAL **: 19:44:00.522: g_once_init_leave: assertion 'result != 0' failed GLib-GObject-CRITICAL **: 19:44:00.522: g_type_register_dynamic: assertion 'parent_type &amp;gt; 0' failed GLib-GObject-CRITICAL **: 19:44:00.522: g_object_new_with_properties: assertion 'G_TYPE_IS_OBJECT (object_type)' failed 類似這樣的訊息(上面截自這裡)
我沒太多想法，能看到的關鍵字只有GtkIMContext，只好往IME的方向研究。後來得到HIME的Issue #584，便自己編譯了一下HIME 安裝了自己編譯的HIME就奇蹟般的沒事了OwO，果然還是要&amp;quot;Homebrew&amp;quot;阿(?</description></item><item><title>Linux 邏輯磁區在重開後變為 inactivate</title><link>https://blog.jw910731.wtf/blog/lvm-inactive-boot/</link><pubDate>Wed, 26 Aug 2020 15:38:57 +0800</pubDate><guid>https://blog.jw910731.wtf/blog/lvm-inactive-boot/</guid><description>Info 硬體 CPU: AMD Ryzen 3800X
GPU: AMD RX570
RAM: 16GB
磁區分配 PV 硬碟 SSD(nvme0n1p5) HHD(sda2) PV size 250GB 250GB VG SSD+HHD: sys
LV sys/root(根目錄) : SSD 186GB
sys/home(家目錄) : SSD 64GB(Lvm Cache) + HHD 250GB
非LVM nvme0n1p1 ( 500MB ): EFI nvme0n1p4 ( 1GB ): /boot 軟體 OS: Linux Mint 20
其餘軟體預載
事件 系統正確設置安裝後，開機時會卡在mounting /dev/sys/home，timeout後無法正確啟動
研究 插入開機碟後發現sys/home不可見，隨後經過googling與探索後發現是不知為何LV inactivated了</description></item><item><title>AWS帳號啟用心得文</title><link>https://blog.jw910731.wtf/blog/aws-fail-verify/</link><pubDate>Mon, 17 Aug 2020 00:06:09 +0800</pubDate><guid>https://blog.jw910731.wtf/blog/aws-fail-verify/</guid><description>緣由 之前雖然有一個AWS帳號，但因為不知道要拿來玩什麼就沒有動他了。直到最近有幸搶到shrt.tw網域，我想來搞個serverless url shortener，就把AWS帳號翻出來用了。
結果啟用香港地區的時候居然被帳號啟用卡住，而且電話驗證一直出現要我找客服求救，我等了一天再試也還是不行，就向客服求救了。
悲劇 本來想說透過步調緩慢的信件來往比較舒服，結果直接回了一封機器人要我Chat，我一整個嚇怕，以為是語音通訊，還好只是線上聊天室而已！
Chat裡面的客服要我給他手機號碼要幫我做「人工認證」，我給了+886 09XXXXXXXX的電話給他，但&amp;hellip;.我忘記外國手機號碼前面沒有0了，反覆試了好幾個電話都不成功，他要我確認我有沒有拒接外國來電，並跟我說再幫試最後一次，但還是爛掉了，他就不理我了QQ
後來我換了個客服人員並給他好的前面沒有0的電話號碼，結果還是打不進來，轉接語音信箱。後來不知道為什麼突然就可以用了，我猜是家裡訊號太爛T_T
來電顯示來自南非，我心想拜託給我機器人給我機器人我只想聽他念英文數字阿阿阿阿阿阿。然後他就給我一個口音有點重，音質超爛的客服人員，看來就是剛才在線上文字通訊的客服小姐了。在瘋狂的重複&amp;quot;Could you repeat your question again.&amp;ldquo;跟&amp;quot;Could you hear me?&amp;ldquo;後終於完成電話號碼、E-mail、名字的確認了。並在文字聊天中跟我說我現在只要等他用E-mail跟我通知說人工驗證完成即可，但我到現在仍舊沒收到他的E-mail QQ
總結 我覺得AWS客服都算有耐心，只是系統真的太難用，音質太差(跟我說是Quality Control我只能說你客家人？)，然後不明所以的需要人工驗證讓人傻眼。真正的AWS使用心得就等寫完shrt.tw的serverless服務後再來發一篇吧！</description></item><item><title>第一次Hugo!</title><link>https://blog.jw910731.wtf/blog/first-time-hugo/</link><pubDate>Sun, 16 Aug 2020 01:07:37 +0800</pubDate><guid>https://blog.jw910731.wtf/blog/first-time-hugo/</guid><description>一開始因為某部落格主從Jekyll跳槽Hugo，讓我注意到了Hugo，那時我就下定決心以後寫blog一定要用Hugo。時隔多月，我已經要開始寫blog了，便著手研究如何舒服調教Hugo。
安裝 一開始都很順利，隨便選了一個Terminal的theme。 結果因為他要我安裝babel等npm套件而卡住，後來才知道把在hugo的根目錄用npm安裝所需套件即可。
選Theme 這真的很難，一開始選的Terminal因為等寬字體的關係，閱讀起來其實有點吃力，看久了不舒服，所以就想打掉重練好好換個theme。左思右想後選了這個Codex，雖然是邪教Light Theme但版面大方俐落，選用閱讀起來舒服的字體，在多方比對後終於定稿！
調教 有了第一次調教Temrinal theme的經驗，對於hugo的結構與環境也熟悉了不少，而且這次的theme貼心提供主頁，讓我喇喇設定檔就有好看的主頁可以用 : )
唯一想要許的願望大概就是希望可以串插件讓我中文字與英文字的交接處可以自動加入空格了。這等著以後研究吧，先睡。
驚魂 然後正當我想安詳的睡去時，才發現我只有輸出XML檔。後來爬了好久才發現我剛才創建gh-pages這個production分支的時候，誤刪了作為theme本體的submodule的內容了，所以沒辦法找到theme的相關設定，只好輸出xml檔案。
重新部屬submodule後事情就安心結束了
Github Action自動部屬 然後就迎來了精彩的Github Action自動部屬了，早上我簡單的喇了一下文件跟組成Github Action的部件後，發現其實各個元件都包的很好了。
我便從GH Action Hugo的網頁裡面喇了範例出來用，結果居然爛掉！
後來才發現因為gh-pages這個branch已經存在，我把它刪掉讓GH Action重建這個branch就好了</description></item></channel></rss>